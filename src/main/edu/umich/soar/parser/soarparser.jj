options
{
  LOOKAHEAD = 3;
  CHOICE_AMBIGUITY_CHECK = 2;
  OTHER_AMBIGUITY_CHECK = 1;
  STATIC = false;
  DEBUG_PARSER = false;
  DEBUG_LOOKAHEAD = false;
  DEBUG_TOKEN_MANAGER = false;
  ERROR_REPORTING = true;
  JAVA_UNICODE_ESCAPE = false;
  UNICODE_INPUT = false;
  IGNORE_CASE = false;
  USER_TOKEN_MANAGER = false;
  USER_CHAR_STREAM = false;
  BUILD_PARSER = true;
  BUILD_TOKEN_MANAGER = true;
  SANITY_CHECK = true;
  FORCE_LA_CHECK = true;
}

PARSER_BEGIN(SoarParser)
package edu.umich.soar.parser;
import java.util.*;
import java.util.regex.Pattern;
/**
	@author Brad Jones
	if you are looking at the java file, it isn't going to make a lot of sense
	I used the Java Compiler Compiler to make the lexer and parser
	the homepage is http://www.metamata.com
*/
public class SoarParser {
	private static Pattern productionNamePattern = Pattern.compile("[0-9a-zA-Z][0-9a-zA-Z$%&*/<=>?_@:-]*");
	private static Pattern symbolicConstantPattern = Pattern.compile("[a-zA-Z0-9$%&*+/<=>?_-][a-zA-Z0-9$%&*+/:<=>?_-]*");
	private static Pattern quotedConstantPattern = Pattern.compile("\\|\\s*[^|]*\\s*\\|");
}
PARSER_END(SoarParser)

SKIP:
{
	 < "#" (~["\n","\r"])*>
	|<";#" (~["\n","\r"])*>
	|" "
	|"\t"
	|"\n"
	|"\r"
}

TOKEN:
{
    <SP:        "sp"> : IN_SOAR_PRODUCTION
    |<GP:       "gp"> : IN_SOAR_PRODUCTION
    |<SOARCMD:  ("global"|"set"|"puts"|"alias"|"attention-lapse"|"attribute_preferences_mode"|"capture-input"|"chunk-name-format"|"command-to-file"|"default_wme_depth"|"dirs"|"echo"|"epmem"|"excise"|"explain-backtraces"|"firing-counts"|"format-watch"|"gds_print"|"help"|"indifferent-selection"|"init-soar"|"input-period"|"internal-symbols"|"io"|"learn"|"log"|"matches"|"max-chunks"|"max-elaborations"|"max-nil-output-cycles"|"max_chunks"|"max_elaborations"|"memories"|"monitor"|"multi-attributes"|"o-support-mode"|"output-strings-destination"|"o_support_mode"|"popd"|"predefined-aliases"|"predict"|"preferences"|"print"|"production-find"|"pushd"|"pwatch"|"quit"|"remove-wme"|"replay-input"|"rete-net"|"rhsfun"|"rl"|"run"|"save_backtraces"|"select"|"send"|"soar"|"soar8"|"soarnews"|"soartk"|"start-attention-lapse"|"stats"|"stop-soar"|"topd"|"tsi"|"unalias"|"variables"|"version"|"viSTEAM"|"vt"|"vtutor"|"wake-from-attention-lapse"|"wake"|"warnings"|"watch")(~["\n","\r"])*>
}

< IN_SOAR_PRODUCTION > SKIP:
{
	 < "#" (~["\n","\r"])*>
	|<";#" (~["\n","\r"])*>
	|" "
	|"\t"
	|"\n"
	|"\r"
}

< IN_SOAR_PRODUCTION > TOKEN:
{
     <RARROW:		"-->">
	 |<SAME_TYPE:	"<=>">
	 |<GEQUAL:		">=">
	 |<LDISJUNCT:	"<<">
	 |<LEQUAL:		"<=">
	 |<NEQUAL:		"<>">
	 |<RDISJUNCT:	">>">
	 |<AMPERSAND:   "&">
	 |<ATSIGN:      "@">
	 |<CARET:		"^">
	 |<COMMA:		",">
	 |<EMARK:		"!">
	 |<EQUAL:		"=">
	 |<GREATER:		">">
	 |<HYPHEN:		"-">
	 |<LBRACE:		"{">
	 |<LESS:		"<">
	 |<LPAREN:		"(">
	 |<PERIOD:		".">
	 |<PLUS:		"+">
	 |<QMARK:		"?">
     |<RBRACE:		"}">
	 |<RPAREN:		")">
	 |<TILDE:		"~">
	 |<LSQBRACET:   "[">
	 |<RSQBRACET:   "]">
	 |<QUOTE:		"\"">
	 |<DOC_STRING: "\"" (~["\""])* "\"">
     |<PRODTYPE:  (":chunk"|":default"|":o-support"|":i-support"|":monitor"|":interrupt"|":template")>
	 // I know the variable looks weird but it does appear to be correct
	 |<VARIABLE: "<" (["a"-"z","A"-"Z","0"-"9","$","%","&","*","+","-","/",":","=","?","_"])+ ">" >
	 |<INTEGER_CONST: (["+","-"])? (["0"-"9"])+ >
	 // this is symbolic constant, production name, and condition type all in one; need additional checking at parse time
	 |<SYMBOLIC_CONST: (["a"-"z","A"-"Z","0"-"9","$","%","&","*","+","-","/","<","=",">","?","_"])(["a"-"z","A"-"Z","0"-"9","$","%","&","*","+","-","/",":","<","=",">","?","@","_"])* | ("|" (~["|"])* "|") >
	 |<FLOATING_POINT_CONST:
	 					(["0"-"9"])+ "." (["0"-"9"])* (<EXPONENT>)? (["f","F","d","D"])?
	 				| "." (["0"-"9"])+ (<EXPONENT>)? (["f","F","d","D"])?
	 				| (["0"-"9"])+ <EXPONENT> (["f","F","d","D"])?
	 				| (["0"-"9"])+ (<EXPONENT>)? ["f","F","d","D"]
	  >
	 | < #EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+ >
	 |<TCL_PREPROCESS: "[" (~["]"])* "]">
}


Vector VisualSoarFile() :
{
    Vector vec = new Vector();
    SoarProduction sp;
}
{
    (
      ( sp = soarProduction()
      {
          vec.add(sp);
      }
      )
      | <SOARCMD>
	)*
	<EOF>
	{
		return vec;
	}
}

SoarProduction soarProduction() :
{
	SoarProduction sp = new SoarProduction();
	ConditionSide cs;
	ActionSide as;
	Token t;
	SoarProductionFlag flag;
}
{
// Begining of the production
	<SP>
	(<LBRACE> | <QUOTE>)
// its name
	t = <SYMBOLIC_CONST>
	{
		if(!productionNamePattern.matcher(t.image).matches()){
			throw new ParseException("illegal production name: " + t.image);
		}
		sp.setName(t.image);
		sp.setStartLine(t.beginLine);
	}
// optional comment
	(
	  t = <DOC_STRING> {
	    //save the documentation strings, minus the quotation marks
	    sp.setComment(t.image.substring(1,t.image.length()-1));
  	  }
  	)?
// production type
	(flag = productionType() { sp.addProductionFlag(flag); } )*
	cs = conditionSide()
	{ sp.setConditionSide(cs); }
	<RARROW>
	as = actionSide()
	{ sp.setActionSide(as); }
	(<RBRACE> | <QUOTE>)
	{
        token_source.SwitchTo(DEFAULT);  //No longer "IN_SOAR_PRODUCTION"
        return sp;
    }
}


SoarProductionFlag productionType() :
{
	Token t;
}
{
	t = <PRODTYPE>{
	    //remove the leading colon to get the flag name
		return SoarProductionFlag.getFlagByName(t.image.substring(1));
	}
}

/////////////////////////////////////////////////////////////
// The LHS of the production
/*
	The grammar that this recognizes
	<ConditionSide> 			::= <Condition>+
	<FirstCondition>			::= '(' "state" VARIABLE <AttributeValueTest>* ')'
	<Condition>					::= ['-'] PositiveCondition | TCL_PREPROCESS
	<PositiveCondition>	    	::= <ConditionForOneIdentifier>
									| '{' <Condition>+ '}'
	<ConditionForOneIdentifier>	::= '(' VARIABLE <AttributeValueTest>* ')'
	<AttributeValueTest>		::= ['-'] ^ <AttributeTest> ['.'<AttributeTest>]* <ValueTest>*
	<AttributeTest>				::= <Test>
	<ValueTest>					::= <Test> ['+']
	<Test> 						::= <ConjunctiveTest> | <SimpleTest>
	<ConjunctiveTest>			::= '{' <SimpleTest>+ '}'
	<SimpleTest>				::= <DisjunctionTest> | <RelationalTest>
	<DisjunctionTest>			::= '<<' <Constant>+ '>>'
	<RelationalTest>            ::=	 [<Relation>] <SingleTest>
	<Relation>					::=  '<>' | '<=>' | '<' | '<=' | '>=' | '>' | '='
	<SingleTest>				::= <Constant> | VARIABLE
	<Constant> 					::= INTEGER_CONST | SYMBOLIC_CONST | FLOATING_POINT_CONST
*/

// Ok
ConditionSide conditionSide() :
{
	Condition cond;
	ConditionSide retValue = new ConditionSide();
}
{
	(cond = condition()
	{
		if(cond != null)
			retValue.add(cond);
	})+
	{ return retValue; }
}

// Ok
Condition condition() :
{
	boolean negated = false;
	PositiveCondition pcond;
}
{
	(<HYPHEN> { negated = true; })?
	(pcond = positiveCondition())
	{ return new Condition(negated,pcond); }
	| <TCL_PREPROCESS>
	{ return null; }
}

// Ok
PositiveCondition positiveCondition() :
{
	ConditionForOneIdentifier cfoi;
	Condition cond;
	PositiveCondition retVal;

}
{
	(cfoi = conditionForOneIdentifier()) {
		return new PositiveCondition(cfoi);
	}
	| (<LBRACE>
		{
			retVal = new PositiveCondition();
		}
		(cond = condition()
		{
			retVal.add(cond);
		}
		)+ <RBRACE>
	)
	{ return retVal; }
}

// Ok
ConditionForOneIdentifier conditionForOneIdentifier() :
{
	Token t;
	AttributeValueTest avt;
	ConditionForOneIdentifier cfoi = null;
	StateDeclaration state = StateDeclaration.NONE;
}
{
	<LPAREN>
	(
		t = <SYMBOLIC_CONST> {
			if(t.image.equals("state"))
				state = StateDeclaration.STATE;
			else if(t.image.equals("impasse"))
				state = StateDeclaration.IMPASSE;
			else
				throw new ParseException("only state allowed.");
		}
	)?
	(
		(t = <VARIABLE>
		{
			cfoi = new ConditionForOneIdentifier(state,new Pair(t.image,t.beginLine));
		}
		)?
	)
	{
	    //for conditions that don't bind with a variable, which often give warnings or even crash Soar, but should still parse
		if(cfoi == null){
			cfoi = new ConditionForOneIdentifier(state, null);
		}
	}
	(
	  avt = attributeValueTest()
	  {
		  cfoi.add(avt);
	  }
	)*
	<RPAREN>
	{ return cfoi; }
}

// Ok
AttributeValueTest attributeValueTest() :
{
	AttributeValueTest avt = new AttributeValueTest();
	AttributeTest at;
	ValueTest vt;
}
{
	(<HYPHEN>
	{
		avt.negate();
	})?
	<CARET>
	(at = attributeTest())
	{ avt.add(at); }
	(<PERIOD> at = attributeTest() { avt.add(at); })*
	(vt = valueTest() { avt.add(vt); } )*
	{ return avt;}

}

// Ok
AttributeTest attributeTest() :
{
	Test t;
}
{
	t = test()
	{ return new AttributeTest(t); }
}

// Ok
ValueTest valueTest() :
{
	ValueTest vt;
	Test t;
}
{
	  t = test() {
	  	vt = new ValueTest(t);
	  }
	  (<PLUS>{
	  	vt.acceptablePreference();
	  }
	  )?
	  { return vt; }

	// | ConditionsForOneId() John Laird told me to take this out 7/6/99
}

// Ok
Test test() :
{
	ConjunctiveTest ct;
	SimpleTest st;
}
{
	ct = conjunctiveTest()
	{ return new Test(ct); }
	| st = simpleTest()
	{ return new Test(st); }
}

// Ok
ConjunctiveTest conjunctiveTest() :
{
	ConjunctiveTest retVal = new ConjunctiveTest();
	SimpleTest st;
}
{
	<LBRACE>
	( st = simpleTest()
	{ retVal.add(st);}
	)+
	<RBRACE>
	{ return retVal; }
}

// Ok
SimpleTest simpleTest() :
{
	DisjunctionTest dt;
	RelationalTest rt;
}
{
	 dt = disjunctionTest()
	 { return new SimpleTest(dt); }
	 | rt = relationalTest()
	 { return new SimpleTest(rt);}
}


// Ok
DisjunctionTest disjunctionTest() :
{
	DisjunctionTest dt = new DisjunctionTest();
	Constant c;
}
{
	<LDISJUNCT>
	( c = constant() { dt.add(c); })+
	<RDISJUNCT>
	{ return dt;}
}

// Ok
RelationalTest relationalTest() :
{
	int r = RelationalTest.EQ;
	SingleTest st;
}
{
	(r = relation())?
	st = singleTest() {
		return new RelationalTest(r,st);
	}
}

// Ok
int relation() :
{}
{
	 <NEQUAL> {
	 	return RelationalTest.NEQ;
	}
	|<SAME_TYPE> {
		return RelationalTest.EQUIV;
	}
	|<LESS> {
		return RelationalTest.LT;
	}
	|<LEQUAL> {
		return RelationalTest.LTE;
	}
	|<GEQUAL> {
		return RelationalTest.GTE;
	}
	|<GREATER> {
		return RelationalTest.GT;
	}
	|<EQUAL> {
		return RelationalTest.EQ;
	}
}

// Ok
SingleTest singleTest() :
{
	Token t;
	Constant c;
}
{
	t = <VARIABLE>	{
		return new SingleTest(new Pair(t.image,t.beginLine));
	}
	|
	c = constant() {
	  	return new SingleTest(c);
	}
}

// Ok
Constant constant() :
{
	Token t;
}
{
	t = <INTEGER_CONST>	{
		try {
			return new Constant(Integer.parseInt(t.image),t.beginLine);
		}
		catch(NumberFormatException nfe) {
			return new Constant(t.image,t.beginLine);
		}
	}
	|
	LOOKAHEAD({
		getToken(1).kind == SYMBOLIC_CONST && (
			symbolicConstantPattern.matcher(getToken(1).image).matches() || quotedConstantPattern.matcher(getToken(1).image).matches())
	})
	t = <SYMBOLIC_CONST> {
		return new Constant(t.image,t.beginLine);
	}
	| t = <FLOATING_POINT_CONST> {
		try {
			return new Constant(Float.parseFloat(t.image),t.beginLine);
		}
		catch(NumberFormatException nfe) {
			return new Constant(t.image,t.beginLine);
		}
	}
}


//////////////////////////////////////////////////////////////
// Action Side
/* =====================================================================

   Grammar for right hand sides of productions

   <ActionSide> ::= <Action>*
   <Action> ::= <VarAttrValMake> | <FunctionCall> | TCL_PREPROCESS
   <VarAttrValMake> ::= ( VARIABLE <AttributeValueMake>+ )
   <FunctionCall> ::= ( <FunctionName> (TCL_PREPROCESS | <RHSValue>)* )
   <FunctionName> ::= SYMBOLIC_CONST | + | -
     (WARNING: might need others besides +, - here if the lexer changes)
   <RHSValue> ::= <Constant> | <FunctionCall> | VARIABLE
   <Constant> ::= SYMBOLIC_CONST | INTEGER_CONST | FLOATING_POINT_CONST
   <AttributeValueMake> ::= ^ <RHSValue> ['.'<RHSValue>]* <ValueMake>+
   <ValueMake> ::= <RHSValue> <Preferences>

   <Preferences> ::= <PreferenceSpecifier>*
   <PreferenceSpecifier> ::= <NaturallyUnaryPreference> [,]
                            | <ForcedUnaryPreference>
                            | <BinaryPreference> <RHSValue> [,]
   <NaturallyUnaryPreference> ::= + | - | ! | ~
   <BinaryPreference> ::= > | = | <
   <ForcedUnaryPreference> ::= <BinaryPreference> [,]
===================================================================== */

// Done
ActionSide actionSide() :
{
	ActionSide retVal = new ActionSide();
	Action a;
}
{
	(a = action() {
		if(a != null)
			retVal.add(a);
	})*
	{return retVal;}
}

// Ok
Action action() :
{
	Token t;
	VarAttrValMake vavm;
	FunctionCall fc;
}
{
	vavm = varAttrValMake()
	{
		return new Action(vavm);
	}
	| fc = functionCall()
	{
		return new Action(fc);
	}
	| <TCL_PREPROCESS> {
		return null;
	}
}

// Ok
VarAttrValMake varAttrValMake() :
{
	Token t;
	VarAttrValMake retVal;
	AttributeValueMake avm;
}
{
	<LPAREN>
	(t = <VARIABLE>
	{ retVal = new VarAttrValMake(new Pair(t.image,t.beginLine));})
	(avm = attributeValueMake() { retVal.add(avm); })+
	<RPAREN>
	{ return retVal; }
}

// Ok
FunctionCall functionCall() :
{
	Pair funcName;
	FunctionCall funcCall;
	RHSValue rhsv;
}
{
	<LPAREN>
	(funcName = functionName() { funcCall = new FunctionCall(funcName); } )
	(
	rhsv = rhsValue() { funcCall.add(rhsv); }
	| <TCL_PREPROCESS>
	)*
	<RPAREN>
	{ return funcCall; }
}

// Ok
Pair functionName() :
{
	Token t;
}
{
	LOOKAHEAD({
		getToken(1).kind == SYMBOLIC_CONST && (
			symbolicConstantPattern.matcher(getToken(1).image).matches() || quotedConstantPattern.matcher(getToken(1).image).matches())
	})
	(t = <SYMBOLIC_CONST> {
		return new Pair(t.image,t.beginLine);
	} )
	| (t = <PLUS> {
		return new Pair(t.image,t.beginLine);
	})
	| (t = <HYPHEN> {
		return new Pair(t.image,t.beginLine);
	})
}

// Ok
RHSValue rhsValue() :
{
	Token t;
	Constant c;
	FunctionCall fc;
}
{
	(c = constant()
	{
		return new RHSValue(c);
	})
	| (fc = functionCall()
	{
		return new RHSValue(fc);
	} )
	| (t = <VARIABLE>
	{
		return new RHSValue(new Pair(t.image,t.beginLine));
	})
}

// Ok
AttributeValueMake attributeValueMake() :
{
	AttributeValueMake avm = new AttributeValueMake();
	RHSValue rhsv;
	ValueMake vm;
}
{
	<CARET> (rhsv = rhsValue()
	{ avm.add(rhsv); })

	(<PERIOD> rhsv = rhsValue() { avm.add(rhsv); })*
	( vm = valueMake() { avm.add(vm); } )+
	{return avm; }
}


// Ok
ValueMake valueMake() :
{
	PreferenceSpecifier ps;
	RHSValue rhsv;
	ValueMake vm;
}
{
	rhsv = rhsValue()
	{ vm = new ValueMake(rhsv); }

	(	(ps = preferenceSpecifier()
		{ vm.add(ps); })
	)*
	{ return vm; }

}


// Ok
PreferenceSpecifier preferenceSpecifier() :
{
	int type;
	PreferenceSpecifier ps;
	RHSValue rhs;
}
{
	ps = naturallyUnaryPreference() (<COMMA>)?
	{ return ps; }
	| ps = forcedUnaryPreference()
	{ return ps; }
	| (type = binaryPreference()) (rhs = rhsValue()) (<COMMA>)?
	{ return new BinaryPreference(type,rhs); }
}

// Ok
NaturallyUnaryPreference naturallyUnaryPreference() :
{}
{
	<PLUS>
	{ return new NaturallyUnaryPreference(NaturallyUnaryPreference.ACCEPTABLE); }
	| <HYPHEN>
	{ return new NaturallyUnaryPreference(NaturallyUnaryPreference.REJECT); }
	| <EMARK>
	{ return new NaturallyUnaryPreference(NaturallyUnaryPreference.REQUIRE); }
	| <TILDE>
	{ return new NaturallyUnaryPreference(NaturallyUnaryPreference.PROHIBIT); }
	| <ATSIGN>
	{ return new NaturallyUnaryPreference(NaturallyUnaryPreference.ATSIGN); }
}

// Ok
int binaryPreference() :
{}
{
	<GREATER>
	{ return BinaryPreference.GREATER; }
	| <EQUAL>
	{ return BinaryPreference.EQUAL; }
	| <LESS>
	{ return BinaryPreference.LESS; }
	| <AMPERSAND>
	{ return BinaryPreference.AMPERSAND; }

}


// Ok
ForcedUnaryPreference forcedUnaryPreference() :
{
	int type;
}
{
	(type = binaryPreference()) (<COMMA>)?
	{ return new ForcedUnaryPreference(type); }
}

